<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>About on CRC - Runs Containers</title><link>https://crc.dev/blog/</link><description>CRC - Runs Containers (About)</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Wed, 20 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://crc.dev/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>How to use bundle option</title><link>https://crc.dev/blog/posts/2024-03-22-use-bundle-option/</link><pubDate>Fri, 22 Mar 2024 12:39:10 +0530</pubDate><guid>https://crc.dev/blog/posts/2024-03-22-use-bundle-option/</guid><description>&lt;p>CRC provides a config option called &lt;code>bundle&lt;/code> to configure the &lt;em>location&lt;/em> of the bundle. This option is useful when you
want to use a bundle that is not the default one or user want to try a bundle which is not part of release but available
at the OpenShift mirror location. The &lt;code>bundle&lt;/code> option can accept local filesystem paths, container registry URLs, and
http/https URLs. This blog post will guide you through the process of using the &lt;code>bundle&lt;/code> option using config or
setup/start commands.&lt;/p>
&lt;h2 id="using-bundle-option-with-crc-config-command" >Using &lt;code>bundle&lt;/code> option with &lt;code>crc config&lt;/code> command
&lt;span>
&lt;a href="#using-bundle-option-with-crc-config-command">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>You can use the &lt;code>crc config set bundle&lt;/code> command to set the bundle location. This command can accept local filesystem paths,
container registry URLs, and http/https URLs. Here are some examples:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Assume user want to use microshift-4.15.0 bundle which is not part of crc release but available at the OpenShift mirror location&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>crc config set bundle https://developers.redhat.com/content-gateway/file/pub/openshift-v4/clients/crc/bundles/microshift/4.15.0/crc_microshift_libvirt_4.15.0_amd64.crcbundle
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>crc setup
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>crc start
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="using-bundle-option-with-crc-setup-and-crc-start-commands" >Using &lt;code>bundle&lt;/code> option with &lt;code>crc setup&lt;/code> and &lt;code>crc start&lt;/code> commands
&lt;span>
&lt;a href="#using-bundle-option-with-crc-setup-and-crc-start-commands">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>crc setup --bundle https://developers.redhat.com/content-gateway/file/pub/openshift-v4/clients/crc/bundles/microshift/4.15.0/crc_microshift_libvirt_4.15.0_amd64.crcbundle
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>crc start --bundle https://developers.redhat.com/content-gateway/file/pub/openshift-v4/clients/crc/bundles/microshift/4.15.0/crc_microshift_libvirt_4.15.0_amd64.crcbundle
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Beware&lt;/strong>, if you use -b https:// there will be no signature checks
Bundles downloaded from mirror.openshift.com can be verified this way:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl -L -O https://developers.redhat.com/content-gateway/file/pub/openshift-v4/clients/crc/bundles/microshift/4.15.0/crc_microshift_libvirt_4.15.0_amd64.crcbundle
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl -L -O https://developers.redhat.com/content-gateway/file/pub/openshift-v4/clients/crc/bundles/microshift/4.15.0/crc_microshift_libvirt_4.15.0_amd64.crcbundle.sha256
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>sha256sum crc_microshift_libvirt_4.15.0_amd64.crcbundle &lt;span style="color:#f92672">=&lt;/span>&amp;gt; should match with the content of crc_microshift_libvirt_4.15.0_amd64.crcbundle.sha256
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="conclusion" >Conclusion
&lt;span>
&lt;a href="#conclusion">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>This blog post has shown you how to use the &lt;code>bundle&lt;/code> option with CRC. By following these steps, you can quickly and easily
spin up a local cluster using the bundle of your choice.
As usual, we&amp;rsquo;d like to get your &lt;a href="https://github.com/crc-org/crc/issues/new/choose">feedback&lt;/a> on all this work!&lt;/p></description></item><item><title>A Step-by-Step Guide to Creating the MicroShift next Bundle</title><link>https://crc.dev/blog/posts/2023-08-22-create-microshift-next-bundle/</link><pubDate>Tue, 22 Aug 2023 12:30:10 +0530</pubDate><guid>https://crc.dev/blog/posts/2023-08-22-create-microshift-next-bundle/</guid><description>&lt;p>CRC is a tool that allows you to quickly and easily spin up a local OpenShift cluster.
It is a great way to learn about OpenShift/OKD/MicroShift and to test out new features.&lt;/p>
&lt;p>If you&amp;rsquo;re looking to experiment with the upcoming MicroShift release and want to learn
how to create the bundle to consume it with CRC, you&amp;rsquo;re in the right place!
This blog post will guide you through the process step by step.&lt;/p>
&lt;h2 id="prerequisites" >Prerequisites
&lt;span>
&lt;a href="#prerequisites">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>To create a MicroShift bundle, you will need the following:&lt;/p>
&lt;ul>
&lt;li>A computer (or VM which have nested virtualization enabled) with RHEL-9&lt;/li>
&lt;li>At least 60-70 GB of free disk space&lt;/li>
&lt;li>4 CPUs&lt;/li>
&lt;li>8 GB of memory&lt;/li>
&lt;/ul>
&lt;h2 id="getting-the-microshift-pre-release" >Getting the MicroShift Pre Release
&lt;span>
&lt;a href="#getting-the-microshift-pre-release">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>The first step is to make sure there is a MicroShift prerelease version available that you want to use. This information
is present at MicroShift GitHub repo&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/openshift/MicroShift/releases">https://github.com/openshift/MicroShift/releases&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>For example, the latest MicroShift version at the time of this writing is &lt;a href="https://github.com/openshift/microshift/releases/tag/4.14.0-ec.4-202308011235.p0">4.14.0-ec.4&lt;/a>.&lt;/p>
&lt;h2 id="cloning-the-snc-repository" >Cloning the SNC Repository
&lt;span>
&lt;a href="#cloning-the-snc-repository">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Next, you need to clone the SNC repository. This repository contains the scripts that you will use to create the bundle.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone https://github.com/crc-org/snc.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Note:&lt;/strong> The master branch of snc always follows the latest Red Hat OpenShift Container Platform major release. For example, it&amp;rsquo;s currently tracking RHOCP 4.13.x. To generate MicroShift bundles for prerelease, first switch to the appropriate branch:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git checkout origin/release-4.14
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="getting-the-pull-secret" >Getting the Pull Secret
&lt;span>
&lt;a href="#getting-the-pull-secret">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>You need to have a pull secret that will be used for snc script. You can download this pull secret
from &lt;a href="https://console.redhat.com/openshift/create/local">here&lt;/a> using &lt;code>Download Pull Secret&lt;/code> button.&lt;/p>
&lt;h2 id="creating-the-bundle" >Creating the Bundle
&lt;span>
&lt;a href="#creating-the-bundle">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>You are now ready to create the bundle. You can do this by running the following command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>OPENSHIFT_PULL_SECRET_PATH&lt;span style="color:#f92672">=&lt;/span>&amp;lt;downloaded_pull_secret_file_path&amp;gt; MICROSHIFT_PRERELEASE&lt;span style="color:#f92672">=&lt;/span>yes ./microshift.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Note: Wait till the &lt;code>microshift&lt;/code> script finish successfully (takes around 30-40 mins)&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>./createdisk.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Congratulations! You&amp;rsquo;ve successfully created a prerelease version of MicroShift bundle&lt;/strong>&lt;/p>
&lt;h2 id="starting-the-cluster" >Starting the Cluster
&lt;span>
&lt;a href="#starting-the-cluster">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Once you have created the bundle, you can start the cluster by running the following command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>crc setup --bundle crc_microshift_libvirt_4.14.0-ec.4_amd64.crcbundle
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>crc start --bundle crc_microshift_libvirt_4.14.0-ec.4_amd64.crcbundle
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will start the cluster with created MicroShift bundles. Once the cluster is started, you can follow the instructions at the end of start to access it.&lt;/p>
&lt;h2 id="conclusion" >Conclusion
&lt;span>
&lt;a href="#conclusion">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>This blog post has shown you how to create a MicroShift bundle for prerelease and use it with CRC. By following these steps, you can quickly and easily spin up a local cluster using the prerelease version of MicroShift.&lt;/p></description></item><item><title>How to create OKD bundle</title><link>https://crc.dev/blog/posts/2023-06-05-create-okd-bundle/</link><pubDate>Mon, 05 Jun 2023 11:43:10 +0530</pubDate><guid>https://crc.dev/blog/posts/2023-06-05-create-okd-bundle/</guid><description>&lt;p>CRC is a tool that allows you to quickly and easily spin up a local OpenShift cluster.
It is a great way to learn about OpenShift/OKD/MicroShift and to test out new features.&lt;/p>
&lt;p>In this blog post, we will explain to you, how to create an OKD bundle for CRC.&lt;/p>
&lt;h2 id="prerequisites" >Prerequisites
&lt;span>
&lt;a href="#prerequisites">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>To create an OKD bundle, you will need the following:&lt;/p>
&lt;ul>
&lt;li>A computer with a recent version of Fedora, CentOS Stream or RHEL&lt;/li>
&lt;li>At least 60-70 GB of free disk space&lt;/li>
&lt;li>8 CPUs&lt;/li>
&lt;li>24 GB of memory&lt;/li>
&lt;/ul>
&lt;h2 id="getting-the-okd-release" >Getting the OKD Release
&lt;span>
&lt;a href="#getting-the-okd-release">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>The first step is to get the OKD release version that you want to use. This information is present at OKD GitHub repo&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/okd-project/okd/releases">https://github.com/okd-project/okd/releases&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>For example, the latest OKD version at the time of this writing is &lt;a href="https://github.com/okd-project/okd/releases/tag/4.13.0-0.okd-2023-06-04-080300">4.13.0-0.okd-2023-06-04-080300&lt;/a>, this version number will be needed in the following steps.&lt;/p>
&lt;h2 id="cloning-the-snc-repository" >Cloning the SNC Repository
&lt;span>
&lt;a href="#cloning-the-snc-repository">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Next, you need to clone the SNC repository. This repository contains the scripts that you will use to create the bundle.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git clone https://github.com/crc-org/snc.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Note:&lt;/strong> The master branch of snc always follows the latest Red Hat OpenShift Container Platform major release. For example it&amp;rsquo;s currently tracking RHOCP 4.13.x. To generate OKD bundles for older releases, first switch to the appropriate branch:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git checkout origin/release-4.12
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="setting-the-okd-version" >Setting the OKD Version
&lt;span>
&lt;a href="#setting-the-okd-version">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>You need to set the OKD_VERSION environment variable to the version of OKD that you want to use.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>export OKD_VERSION&lt;span style="color:#f92672">=&lt;/span>4.12.0-0.okd-2023-04-16-041331
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="creating-the-pull-secret" >Creating the Pull Secret
&lt;span>
&lt;a href="#creating-the-pull-secret">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>You need to create a dummy pull secret that will be used for snc script. You can create this dummmy pull secret using the following command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cat &lt;span style="color:#e6db74">&amp;lt;&amp;lt;EOF &amp;gt; pullsecret.json
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">{
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;auths&amp;#34;: {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;fake&amp;#34;: {
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;auth&amp;#34;: &amp;#34;Zm9vOmJhcgo=&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> }
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="creating-the-bundle" >Creating the Bundle
&lt;span>
&lt;a href="#creating-the-bundle">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>You are now ready to create the bundle. You can do this by running the following command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>OPENSHIFT_PULL_SECRET_PATH&lt;span style="color:#f92672">=&lt;/span>pullsecret.json ./snc.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Note: Wait till the &lt;code>snc.sh&lt;/code> script finish successfully (takes around 40-50 mins)&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>./createdisk.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="starting-the-cluster" >Starting the Cluster
&lt;span>
&lt;a href="#starting-the-cluster">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>Once you have created the bundle, you can start the cluster by running the following command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>crc setup --bundle crc_okd_libvirt_4.12.0-0.okd-2023-04-16-041331_amd64.crcbundle
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>crc start --bundle crc_okd_libvirt_4.12.0-0.okd-2023-04-16-041331_amd64.crcbundle
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will start the cluster with created OKD bundles. Once the cluster is started, you can follow the instructions at the end of start to access it.&lt;/p>
&lt;h2 id="conclusion" >Conclusion
&lt;span>
&lt;a href="#conclusion">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>This blog post has shown you how to create an OKD bundle for CRC. By following these steps, you can quickly and easily spin up a local cluster using the version of OKD that you want.&lt;/p></description></item><item><title> Introducing MicroShift preset for CRC</title><link>https://crc.dev/blog/posts/2023-04-05-microshift-on-crc/</link><pubDate>Wed, 05 Apr 2023 07:12:10 +0530</pubDate><guid>https://crc.dev/blog/posts/2023-04-05-microshift-on-crc/</guid><description>&lt;p>Are you a developer who wants to use OpenShift Kubernetes Engine but doesn&amp;rsquo;t have a powerful system?
Or do you need to deploy to a small form factor or edge computing environment?
If so, you&amp;rsquo;ll be happy to hear about our new &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_build_of_microshift/4.12/html/getting_started/index">MicroShift&lt;/a> preset,
a lightweight version of OpenShift Kubernetes Engine that&amp;rsquo;s optimized for resource-limited environments.&lt;/p>
&lt;p>The OpenShift preset currently provided by CRC requires 9GB of RAM and 4 CPUs.
With the release of CRC 2.16, you can now use the MicroShift preset, which only requires 4GB of RAM and 2 CPUs.&lt;/p>
&lt;p>What makes MicroShift different from OpenShift Kubernetes Engine? MicroShift is designed for small form factor
and edge computing environments, which means it&amp;rsquo;s optimized for lower resource requirements. MicroShift
uses a subset of the OpenShift Kubernetes Engine components and removes some of the features that aren&amp;rsquo;t needed in these environments.&lt;/p>
&lt;p>&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_build_of_microshift/4.12/html/getting_started/microshift-architecture#microshift-differences-oke_microshift-architecture">Key differences from OpenShift Kubernetes Engine&lt;/a>&lt;/p>
&lt;p>To get started with MicroShift, you&amp;rsquo;ll need to download and install the &lt;a href="https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/crc/latest">latest version&lt;/a> of CRC.
If you already have a CRC instance, delete it using the &lt;code>crc delete&lt;/code> command.
Then set the preset to MicroShift using the &lt;code>crc config set preset microshift&lt;/code> command.
Finally, set up and start CRC using the &lt;code>crc setup&lt;/code> and &lt;code>crc start&lt;/code> commands.
With crc version 2.16, in order to use the oc binary from &lt;code>crc oc-env&lt;/code>, a &lt;a href="https://github.com/crc-org/crc/issues/3581#issuecomment-1497174956">workaround&lt;/a> is needed.&lt;/p>
&lt;p>After CRC is started, a &lt;code>kubeconfig&lt;/code> file will be generated, which is used to connect to the cluster.&lt;/p>
&lt;p>To try out MicroShift, we&amp;rsquo;ve created a sample demo repository that you can find on &lt;a href="https://github.com/praveenkumar/simple-go-server">GitHub&lt;/a>.
It includes step by step instructions to build and deploy a workload on a CRC instance using the MicroShift preset.&lt;/p>
&lt;p>We&amp;rsquo;d love to hear your feedback and suggestions on the MicroShift preset. Please let us know in our &lt;a href="https://github.com/orgs/crc-org/discussions/3584">release discussion&lt;/a>, or if you encounter any issues, please file them on our &lt;a href="https://github.com/crc-org/crc/issues">issue tracker&lt;/a>.&lt;/p>
&lt;p>In conclusion, MicroShift preset is a great option for users who need to use OpenShift Kubernetes Engine in resource-limited environments without some of the features of a Red Hat OpenShift cluster.
So give it a try and see how it can benefit you and your team!&lt;/p></description></item><item><title>vfkit presentation at Containers Plumbing</title><link>https://crc.dev/blog/posts/2023-03-22-containers-plumbing/</link><pubDate>Wed, 22 Mar 2023 16:27:49 +0100</pubDate><guid>https://crc.dev/blog/posts/2023-03-22-containers-plumbing/</guid><description>&lt;p>I gave a vfkit presentation today at &lt;a href="https://containerplumbing.org/sessions/2023/vfkit_a_minimal_">Container Plumbing Days 2023&lt;/a>, the slides can be found &lt;a href="https://crc.dev/blog/Container%20Plumbing%202023%20-%20vfkit%20-%20A%20minimal%20hypervisor%20using%20Apple%27s%20virtualization%20framework.pdf">here&lt;/a> and the talk was &lt;a href="https://www.youtube.com/watch?v=Z2kfaE7H31o">recorded&lt;/a>.&lt;/p></description></item><item><title>Different bundle types option in crc</title><link>https://crc.dev/blog/posts/2022-09-26-bundle-option-in-crc/</link><pubDate>Mon, 26 Sep 2022 10:41:10 +0530</pubDate><guid>https://crc.dev/blog/posts/2022-09-26-bundle-option-in-crc/</guid><description>&lt;p>CRC provides a config option called &lt;code>bundle&lt;/code> to configure the &lt;em>location&lt;/em> of the bundle,
until 2.9 release of CRC the bundle option could only accept local filesystem path
which meant users needed to download the bundle in advance before consuming it. The move to a
container registry for hosting the okd and podman bundles, introduces another step in the
process as bundles are now generated as an OCI container image and the *.crcbundle file
needs to be extracted from the image.&lt;/p>
&lt;p>Since this adds significant friction for users wanting to use different bundles, we decided
to extend the bundle config option to also support container registry urls and http/https urls
in addition to local filesystem paths.&lt;/p>
&lt;p>Starting with CRC 2.9.0 release, &lt;code>bundle&lt;/code> config option supports three different way to configure
bundle location, these are explained below with use cases.&lt;/p>
&lt;p>Case 1: If users want to use their own internal container registry for podman/okd bundles then they can
&lt;em>copy&lt;/em> the bundle images from &lt;code>quay.io&lt;/code> to their internal container registry using &lt;a href="https://github.com/containers/skopeo">skopeo&lt;/a>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Copy latest 4.2.0 podman bundle to internal registry&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ skopeo copy -a docker://quay.io/crcont/podman-bundle:4.2.0 docker://&amp;lt;internal_registry&amp;gt;/podman-bundle:4.2.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ crc config set bundle docker://&amp;lt;internal_registry&amp;gt;/podman-bundle:4.2.0
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ crc config set preset podman
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ crc setup
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ crc start
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Case 2: If user tries to use the bundle which is part of internal http/https location&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ crc config set bundle https://&amp;lt;internal_server&amp;gt;/crc_libvirt_4.11.3_amd64.crcbundle
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ crc setup
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ crc start
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Case 3: If a user tries to use the bundle which is downloaded locally&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ crc config set bundle &amp;lt;local_bundle_path&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ crc setup
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ crc start
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>As usual, we&amp;rsquo;d like to get as much &lt;a href="https://github.com/crc-org/crc/issues/new/choose">feedback&lt;/a> as possible on all this work!&lt;/p></description></item><item><title>Running OKD with CRC</title><link>https://crc.dev/blog/posts/2022-08-22-okd-on-crc/</link><pubDate>Mon, 22 Aug 2022 09:14:10 +0530</pubDate><guid>https://crc.dev/blog/posts/2022-08-22-okd-on-crc/</guid><description>&lt;p>It has been long time since CRC with an updated OKD bundle was released. Last release was &lt;a href="https://www.okd.io/crc/#get-started">1.x&lt;/a> and
not updated since then. During our 2.x development cycle, we made effort on CRC&amp;rsquo;s side to decouple the bundles from the release
artifacts. It allows us to create the bundle independently of the release and upload it to separate location.&lt;/p>
&lt;p>Another change we made during 2.x is to add support for presets and from starting we are supporting &lt;code>podman&lt;/code> and &lt;code>openshift&lt;/code>
preset with &lt;code>openshift&lt;/code> as default. With the recently released &lt;a href="https://github.com/crc-org/crc/releases/tag/v2.7.1">crc 2.7.1&lt;/a>
an &lt;code>okd&lt;/code> preset was added and users can now use same &lt;code>crc&lt;/code> binary to start a OKD cluster.&lt;/p>
&lt;p>&lt;em>A &amp;ldquo;preset&amp;rdquo; is a set of configuration parameters for the bundle to be used, the assigned memory and CPU and changes behaviour if needed for the startup process.&lt;/em>&lt;/p>
&lt;h1 id="how-it-works" >How it works
&lt;span>
&lt;a href="#how-it-works">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;p>The CRC team created the OKD bundle for &lt;a href="https://github.com/openshift/okd/releases/tag/4.11.0-0.okd-2022-07-29-154152">4.11.0-0.okd-2022-07-29-154152&lt;/a> release
and pushed it as container image to &lt;a href="https://quay.io/repository/crcont/okd-bundle">quay&lt;/a>. With the &lt;code>okd&lt;/code> preset, the user is now able to
run an OKD cluster locally similar to OCP.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ crc config set preset okd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Changes to configuration property &lt;span style="color:#e6db74">&amp;#39;preset&amp;#39;&lt;/span> are only applied when the CRC instance is created.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>If you already have a running CRC instance with different preset, &lt;span style="color:#66d9ef">then&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span> this configuration change to take effect, delete the CRC instance with &lt;span style="color:#e6db74">&amp;#39;crc delete&amp;#39;&lt;/span>, setup it with &lt;span style="color:#e6db74">`&lt;/span>crc setup&lt;span style="color:#e6db74">`&lt;/span> and start it with &lt;span style="color:#e6db74">&amp;#39;crc start&amp;#39;&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ crc config view
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- consent-telemetry : yes
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>- preset : okd
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ crc setup
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>...&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>INFO Checking &lt;span style="color:#66d9ef">if&lt;/span> /Users/prkumar/.crc/cache/crc_okd_vfkit_4.11.0-0.okd-2022-07-29-154152_arm64.crcbundle exists
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>INFO Getting bundle &lt;span style="color:#66d9ef">for&lt;/span> the CRC executable
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>INFO Downloading crc_okd_vfkit_4.11.0-0.okd-2022-07-29-154152_arm64.crcbundle
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>...&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ crc start
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>...&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="where-were-at" >Where we&amp;rsquo;re at
&lt;span>
&lt;a href="#where-were-at">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;ul>
&lt;li>Update the CRC related pages on OKD&lt;/li>
&lt;li>Put CI in place to create OKD bundles for each release and upload it to quay.&lt;/li>
&lt;li>Coordinate with OKD community to interact with users.&lt;/li>
&lt;/ul>
&lt;p>As usual, we&amp;rsquo;d like to get as much &lt;a href="https://github.com/crc-org/crc/issues/new/choose">feedback&lt;/a> as possible on all this work!&lt;/p></description></item><item><title>Running ocp on M1 machines</title><link>https://crc.dev/blog/posts/2022-08-17-ocp-on-m1/</link><pubDate>Wed, 17 Aug 2022 08:58:10 +0530</pubDate><guid>https://crc.dev/blog/posts/2022-08-17-ocp-on-m1/</guid><description>&lt;p>With the release of CRC 2.4.1 it was possible to run on Apple&amp;rsquo;s latest offering of M1-based machines.
However, the support was limited to podman preset. Numerous times we received requests if it would be
possible to instead offer an OpenShift that would run on these machines. This has changed with the recently released &lt;a href="https://github.com/crc-org/crc/releases/tag/v2.7.1">crc 2.7.1&lt;/a>.
This blog post will describe the challenges we had to overcome when we decided to add that support.&lt;/p>
&lt;h1 id="background" >Background
&lt;span>
&lt;a href="#background">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;p>CRC is a tool that manages the lifecycle of a virtual machine and allows you to run an OpenShift cluster or podman containers on a laptop or local workstation.
It can be used on a macOS, Windows or Linux machine.
It runs its OpenShift cluster/podman runtime using a disk image built in advance and packaged in what we call a &lt;em>bundle&lt;/em>.
On each platform, we try to use native hypervisors, such as KVM on Linux, Hyper-V on Windows, and using the virtualization framework on macOS.&lt;/p>
&lt;h1 id="issue-of-running-ocp-on-m1" >Issue of running OCP on M1
&lt;span>
&lt;a href="#issue-of-running-ocp-on-m1">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;p>Openshift container platform (OCP) uses Red Hat Core OS (RHCOS) which is based on latest RHEL-8 which is
compiled for a 64K page size, but Apple M1 processor uses 4K or a maximum size of 16K page sizes &lt;a href="https://access.redhat.com/discussions/5966451">link&lt;/a>.&lt;/p>
&lt;h1 id="how-it-works" >How it works
&lt;span>
&lt;a href="#how-it-works">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;p>After we provision the Openshift cluster we replaced the RHEL-8 kernel packages to RHEL-9 which doesn&amp;rsquo;t have issue to boot on
Apple M1 machines. Using this kernel it is possible to workaround this issue, and we are able to run the created disk image on M1.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>$ rpm -qa | grep kernel
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kernel-5.14.0-70.13.1.el9_0.aarch64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kernel-core-5.14.0-70.13.1.el9_0.aarch64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kernel-modules-extra-5.14.0-70.13.1.el9_0.aarch64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kernel-modules-5.14.0-70.13.1.el9_0.aarch64
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="where-were-at" >Where we&amp;rsquo;re at
&lt;span>
&lt;a href="#where-were-at">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;p>Once RHCOS switches to RHEL-9, we don&amp;rsquo;t need to replace the kernel bits manually and this workaround can be removed.&lt;/p>
&lt;p>As usual, we&amp;rsquo;d like to get as much &lt;a href="https://github.com/crc-org/crc/issues/new/choose">feedback&lt;/a> as possible on all this work!&lt;/p></description></item><item><title>Running crc on M1 machines</title><link>https://crc.dev/blog/posts/2022-06-15-vfkit/</link><pubDate>Wed, 15 Jun 2022 16:08:10 +0200</pubDate><guid>https://crc.dev/blog/posts/2022-06-15-vfkit/</guid><description>&lt;p>Since its initial release, CRC has been running on macOS as well as on Windows and Linux.
However macOS support was limited to Apple machines with an Intel CPUs until recently.
With Apple&amp;rsquo;s ongoing switch to aarch64 M1 CPUs, we&amp;rsquo;ve been asked numerous times when CRC would get M1 support.
This has changed with the recently released &lt;a href="https://github.com/crc-org/crc/releases/tag/v2.4.1">crc 2.4.1&lt;/a>.
This blog post will describe the challenges we had to overcome when we decided to add that support.&lt;/p>
&lt;h1 id="background" >Background
&lt;span>
&lt;a href="#background">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;p>CRC is a tool which allows you to run an OpenShift cluster or podman containers on a laptop or local workstation.
It can be used on a macOS, Windows or Linux machine.
It runs its OpenShift cluster/podman runtime by starting a virtual machine (VM) using a disk image built in advance and packaged in what we call a &lt;em>bundle&lt;/em>.
On each platform, we try to use native hypervisors.&lt;/p>
&lt;p>On macOS, crc uses &lt;a href="https://github.com/moby/hyperkit">hyperkit&lt;/a> as its
hypervisor. It has served us well over the years, but lately it hasn&amp;rsquo;t seen a
lot of maintainance, and we&amp;rsquo;ve been hitting a few annoying bugs in its &lt;a href="https://github.com/mirage/ocaml-qcow">ocaml
qcow2 implementation&lt;/a>.&lt;/p>
&lt;p>However, the main problem with hyperkit is that it&amp;rsquo;s x86_64 only. It does not
provide any M1 support, so we had to look for alternatives if we want to run
CRC on a M1 mac.&lt;/p>
&lt;h1 id="qemu-and-virtualizationframework" >QEMU and virtualization.framework
&lt;span>
&lt;a href="#qemu-and-virtualizationframework">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;p>When looking for hypervisors we could use on macOS, we found two candidates:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.qemu.org/">QEMU&lt;/a> with its &lt;a href="https://wiki.qemu.org/Features/HVF">hvf acceleration&lt;/a>&lt;/li>
&lt;li>Apple&amp;rsquo;s own &lt;a href="https://developer.apple.com/documentation/virtualization">virtualization framework&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="qemu" >QEMU
&lt;span>
&lt;a href="#qemu">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>QEMU is a widely used hypervisor on Linux systems, but it can also be used on
Windows and macOS. On macOS, it can use Apple&amp;rsquo;s &lt;a href="https://developer.apple.com/documentation/hypervisor">hypervisor
framework&lt;/a> to make use of
virtualization support in hardware.
It has a huge range of features. In particular it supports many virtio devices including &lt;a href="https://virtio-fs.gitlab.io/">virtiofs&lt;/a> for file sharing,
Its main drawback is that for supply chain trust reasons, we&amp;rsquo;d have to maintain
our own QEMU builds, which can be quite an endeavour given the size of QEMU&amp;rsquo;s
code base (2 million lines of C code).&lt;/p>
&lt;h2 id="apples-virtualization-framework" >Apple&amp;rsquo;s virtualization framework
&lt;span>
&lt;a href="#apples-virtualization-framework">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h2>&lt;p>This is a &lt;a href="https://developer.apple.com/documentation/virtualization">high level Objective-C/swift framework&lt;/a> to start virtual machines on Apple hardware with a small set of virtio devices (disk, network, &amp;hellip;).
It was introduced in macOS &amp;lsquo;Big Sur&amp;rsquo; 11.0, and only supports macOS and Linux virtual machines. Luckily, our bundle is a Linux image, so it&amp;rsquo;s good enough for us!
It obviously supports both x86_64 and M1 CPUs.&lt;/p>
&lt;p>Its main advantage and drawback is that it&amp;rsquo;s a high-level framework maintained by Apple. This means very little code is needed to create a virtual machine with it, and Apple maintains and updates all the low-level virtualization code for us.
This is also a drawback, as this framework is closed source. This means we fully depend on Apple for fixing any bugs that we might find. And unfortunately, we&amp;rsquo;ve already hit such bugs in Apple&amp;rsquo;s implementation of virtiofs, a &lt;a href="https://developer.apple.com/bug-reporting/">bug has been filed&lt;/a>, but we have no control over when it will get fixed, if ever.&lt;/p>
&lt;h1 id="introducing-vfkit" >Introducing vfkit
&lt;span>
&lt;a href="#introducing-vfkit">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;p>Apple&amp;rsquo;s virtualization framework looks promising, but it&amp;rsquo;s just a framework. A framework is similar to a shared library on Linux, your code can link to it to use what it offers, but you can&amp;rsquo;t directly use it as a commandline or GUI tool.
One particular caveat with the virtualization framework is that any virtual machines you start with it will only stay alive as long as the process which started it is alive.&lt;/p>
&lt;p>We could not find any pre-existing FOSS commandline tool to manage virtual machines with Apple&amp;rsquo;s virtualization framework, but luckily for us, there are &lt;a href="https://github.com/Code-Hex/vz">go bindings for it&lt;/a>.
This allowed us to write a small commandline wrapper using these bindings which we called &lt;a href="https://github.com/crc-org/vfkit">&lt;code>vfkit&lt;/code>&lt;/a>
It does not cover all features exposed by &lt;code>Code-Hex/vz&lt;/code> and the virtualization framework, but we can expand this over time. At the moment, its commandline is enough for CRC&amp;rsquo;s needs, including support for both system and usermode networking.&lt;/p>
&lt;h1 id="where-were-at" >Where we&amp;rsquo;re at
&lt;span>
&lt;a href="#where-were-at">
&lt;svg viewBox="0 0 28 23" height="100%" width="19" xmlns="http://www.w3.org/2000/svg">&lt;path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71" fill="none" stroke-linecap="round" stroke-miterlimit="10" stroke-width="2"/>&lt;/svg>
&lt;/a>
&lt;/span>
&lt;/h1>&lt;p>With &lt;code>vfkit&lt;/code>, we have a way of starting virtual machines on M1 hardware. The second thing that we need is a bundle with the appropriate disk images. The two main changes we had to do were:&lt;/p>
&lt;ul>
&lt;li>move from qcow2 to raw disk images as this is the only format Apple&amp;rsquo;s virtualization framework supports. This meant modifying CRC to make use of &lt;a href="https://en.wikipedia.org/wiki/Sparse_file">sparse files&lt;/a> as much as possible to minimize disk usage. The &lt;a href="https://www.manpagez.com/man/2/clonefile/">&lt;code>clonefile&lt;/code>&lt;/a> system call was also very handy to limit the amount of disk space that we use&lt;/li>
&lt;li>the &lt;a href="https://www.kernel.org/doc/Documentation/arm64/booting.txt">aarch64 kernel &lt;strong>must&lt;/strong> be uncompressed&lt;/a>, otherwise the virtual machine won&amp;rsquo;t start. This is fairly tedious to figure out as you don&amp;rsquo;t get any output from the virtual machine to let you know what went wrong.&lt;/li>
&lt;/ul>
&lt;p>After these changes, we were able to generate a podman bundle to use natively on a M1 machine. As its x86_64 counterpart, this bundle is built on top of Fedora CoreOS.
Running OpenShift on a M1 CPU won&amp;rsquo;t be possible soon, as it&amp;rsquo;s currently based on Red Hat CoreOS 8, and &lt;a href="https://access.redhat.com/solutions/6545411">its kernel is incompatible with M1 CPUs&lt;/a>.&lt;/p>
&lt;p>&lt;code>vfkit&lt;/code> support for x86_64 hardware landed in crc 2.3.0 release, and so far did not have many issues reported.
We merged M1 vfkit support in crc 2.4.1, but had last minute issues related to signing, so it&amp;rsquo;s only available as an &lt;a href="https://github.com/crc-org/crc/releases/download/v2.4.1/crc-macos-unsigned-arm64.pkg">unsigned installer&lt;/a> for this release. Hopefully this will be solved in time for crc 2.5.&lt;/p>
&lt;p>Once this is finalized, we still have plenty to explore in vfkit and M1 support: file sharing support, OKD bundles, microshift bundles, &amp;hellip; so stay tuned!&lt;/p>
&lt;p>As usual, we&amp;rsquo;d like to get as much &lt;a href="https://github.com/crc-org/crc/issues/new/choose">feedback&lt;/a> as possible on all this work!&lt;/p></description></item></channel></rss>